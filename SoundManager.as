/*** ...* @author Jeff Fulton* @version 0.1*/package  {		import flash.events.*;	import GamePlay;	import GameLoop;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.SoundMixer;		public class SoundManager {				public var gamePlay:GamePlay;						public var titleMusic:SoundMusic1;		public var titleMusicChannel:SoundChannel; 		public var titleMusicPlaying:Boolean=false;				public var playerStart:SoundPlayerStart;		public var playerStartChannel:SoundChannel;				public var inGameMusic1:SoundMusicIngame1;		public var inGameMusic1Channel:SoundChannel;		public var inGameMusic1Playing:Boolean=false			public var inGameMusic2:SoundMusicIngame2;		public var inGameMusic2Channel:SoundChannel;		public var inGameMusic2Playing:Boolean=false;				public var eatDot:SoundEatDot;		public var eatDotChannel:SoundChannel;				public var eatEnemy:SoundEatEnemy;		public var eatEnemyChannel:SoundChannel;				public var playerDie:SoundPlayerDie;		public var playerDieChannel:SoundChannel;						public var eatPowerup:SoundEatPowerup;		public var eatPowerupChannel:SoundChannel;				public var bonusCount:SoundBonusCount;		public var bonusCountChannel:SoundChannel;				public var pop1:SoundPop1		public var pop1Channel:SoundChannel;				public var totalbonus:SoundTotalbonus;		public var totalbonusChannel:SoundChannel;						public var freezeEffect:SoundFreezeEffect;		public var freezeEffectChannel:SoundChannel;										public var transport:SoundTransport;		public var transportChannel:SoundChannel;				public var key:SoundKey;		public var keyChannel:SoundChannel;				//public var door:SoundDoor;		//public var doorChannel:SoundChannel;				public var killall:SoundKillAll;		public var killallChannel:SoundChannel;				public var bonusxupdate:SoundBonusXUpdate;		public var bonusxupdateChannel:SoundChannel;				public var levelout:SoundLevelOut;		public var leveloutChannel:SoundChannel;										var transform:SoundTransform=new SoundTransform();		var channel:SoundChannel;		var channel2:SoundChannel;				var transform1:SoundTransform=new SoundTransform();		var transform2:SoundTransform=new SoundTransform();		var transform3:SoundTransform=new SoundTransform();		var transform4:SoundTransform=new SoundTransform();				var soundMute:Boolean=false;		var gameLoop:GameLoop;				public function SoundManager(gameLoopval:GameLoop) {			gameLoop=gameLoopval;			init();			gameLoop.addEventListener(GameLoop.SOUNDMUTE, soundMuteListener,false,0,true);		}			public function setgamePlay(val:GamePlay):void {			gamePlay=val;					}				public function initListeners():void {						gamePlay.scorePanel.addEventListener(GamePlay.POWERUPATTACKSTART, powerUpAttackStartListener,false,0,true);			gamePlay.scorePanel.addEventListener(GamePlay.POWERUPATTACKEND, powerUpAttackEndListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYERSTART, playerStartListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYERDEATHCOMPLETE,playerDeathCompleteListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYEREATDOT,playerEatDotListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYEREATPOWERUP,playerEatPowerupListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYEREATENEMY,playerEatEnemyListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYERDIE,playerDieListener,false,0,true);			gamePlay.addEventListener(GamePlay.LEVELOUTCOUNTTIMEBONUS,levelOutCountTimeBonusListener,false,0,true);			gamePlay.addEventListener(GamePlay.PLAYEROUTSTARTED,playerOutStartedListener,false,0,true);			gamePlay.addEventListener(GamePlay.ACCTIMERSTART, accTimerStartListener,false,0,true);			gamePlay.scorePanel.addEventListener(GamePlay.ACCTIMERABOUTTOEND, accTimerToEndListener,false,0,true);			gamePlay.scorePanel.addEventListener(GamePlay.POWERUPATTACKABOUTOEND, powerUpAttackAboutToEndListener,false,0,true);			gamePlay.addEventListener(GamePlay.INVTIMERSTART, invTimerStartListener,false,0,true);			gamePlay.scorePanel.addEventListener(GamePlay.INVTIMERABOUTTOEND, invTimerAboutToEndListener,false,0,true);			gamePlay.addEventListener(GamePlay.TRANSPORTSTART, transportStartListener,false,0,true);			//gamePlay.addEventListener(GamePlay.KEYEATEN, keyEatenListener,false,0,true);			gamePlay.addEventListener(GamePlay.POWERUPKILLALL, powerUpKillAllListener,false,0,true);			gamePlay.player.addEventListener(GamePlay.INCREMENTBONUSX, bonusXUpdateListener,false,0,true);			gamePlay.addEventListener(GamePlay.POWERUPPRINCESSPLAYSOUND, powerUpPrincessListener,false,0,true);			gamePlay.addEventListener(GamePlay.GAMEQUIT, gameQuitListener,false,0,true);		}						public function init():void {						titleMusic= new SoundMusic1();			inGameMusic1=new SoundMusicIngame1();			inGameMusic2=new SoundMusicIngame2();			playerStart=new SoundPlayerStart();						eatDot=new SoundEatDot();			eatEnemy=new SoundEatEnemy();			playerDie=new SoundPlayerDie();			eatPowerup=new SoundEatPowerup();			bonusCount=new SoundBonusCount();			pop1=new SoundPop1();			totalbonus=new SoundTotalbonus();									freezeEffect=new SoundFreezeEffect();			//attack=new SoundAttack();						transport=new SoundTransport();			key=new SoundKey();			//door=new SoundDoor();			killall=new SoundKillAll();			bonusxupdate=new SoundBonusXUpdate();			levelout=new SoundLevelOut();												//transforms			transform1.volume=3;			transform2.volume=2;			transform3.volume=2;			transform4.volume=.1;					}				public function soundMuteListener(e:Event) {			trace("sound manager got mute event");			if (soundMute) {				soundMute=false;				if (inGameMusic1Playing) playInGameMusic1();				if (inGameMusic2Playing) playInGameMusic2();				if (titleMusicPlaying) restartTitleMusic();							}else{				flash.media.SoundMixer.stopAll();				soundMute=true;			}		}								public function playSound(sName:String, iLoop:Number, volume:Number):void {									if (!soundMute) {							try{														trace("sound name=" + sName);					trace("playsound 1");					transform.volume=volume;					trace("playsound 2");					channel= this[sName].play(0,iLoop);					trace("playsound 3");					this[sName+"Channel"] = channel;					trace("playsound 4");					trace("volume=" + volume);					channel.soundTransform=transform;					trace("playsound 5");								}catch(e:Error) {					trace("sound name=" + sName);					trace("playsound 1");					transform.volume=volume;					trace("playsound 2");					channel= this[sName].play(0,iLoop);					trace("playsound 3");					this[sName+"Channel"] = channel;					trace("playsound 4");					trace("volume=" + volume);					trace("playsound 5");				}						}		}				public function gameQuitListener(e:Event):void {			stopInGameMusic1();			stopInGameMusic2();		}						public function stopSound(sName:String):void {			var channel = this[sName+"Channel"];			channel.stop();		}						private function bonusXUpdateListener(e:Event) :void {			playSound("bonusxupdate", 1, 2);					}				private function powerUpPrincessListener(e:Event) :void {			trace("princess sound listener");			//playSound("princess", 2, 2);								}								private function powerUpKillAllListener(e:Event):void {			////playSound("killall", 1, 2);			//playSound("imfree", 1, 2);					}				private function keyEatenListener(e:Event):void {			playSound("key", 1, 2);			//playSound("door",1, 3);		}				private function transportStartListener(e:Event):void {			trace("sound manager transport start listener");			playSound("transport", 1, 1);		}				private function invTimerStartListener(e:Event):void {			//playSound("protect", 1, 2);		}				private function invTimerAboutToEndListener(e:Event):void {			trace("invTimerAbouToEndListener");			//playSound("warningProtect", 1, 2);		}						private function powerUpAttackAboutToEndListener(e:Event):void {			//playSound("warningAttack", 1, 2);		}				private function accTimerStartListener(e:Event):void {			//playSound("freeze", 1, 1);			playSound("freezeEffect", 1, 2);		}				private function accTimerToEndListener(e:Event):void {			//playSound("warningFreeze", 1, 2);		}						private function playerOutStartedListener(e:Event):void {			if (inGameMusic1Playing) {				stopInGameMusic1();			}						if (inGameMusic2Playing) {				stopInGameMusic2();			}			playSound("levelout", 1, 2);		}				private function levelOutCountTimeBonusListener(e:Event):void {			playSound("bonusCount", 1, .1);		}				private function playerDieListener(e:Event):void {			playSound("playerDie", 1, 1);			if (inGameMusic1Playing) {				stopInGameMusic1();			}						if (inGameMusic2Playing) {				stopInGameMusic2();			}		}				private function playerEatEnemyListener(e:Event):void {			playSound("eatEnemy", 1, .5);		}				private function playerEatPowerupListener(e:Event):void {			playSound("eatPowerup", 1, 2);		}				public function playerEatDotListener(e:Event):void {			playSound("eatDot", 1, 2);		}				private function playerDeathCompleteListener(e:Event):void {			if (inGameMusic1Playing) {				stopInGameMusic1();			}						if (inGameMusic2Playing) {				stopInGameMusic2();			}		}				private function playerStartListener(e:Event) {			trace("sound manager playerstart listener");			playSound("playerStart", 1, 3);			playInGameMusic1();					}						private function powerUpAttackStartListener(e:Event) :void {			trace("soundManager:PowerupAttackStart");			if (inGameMusic1Playing) {				stopInGameMusic1();			}						if (inGameMusic2Playing) {				stopInGameMusic2();			}			playInGameMusic2();			//playSound("attack", 1, 2);		}				private function powerUpAttackEndListener(e:Event) :void {			trace("soundManager:PowerupAttackEnd");				if (inGameMusic1Playing) {				stopInGameMusic1();			}						if (inGameMusic2Playing) {				stopInGameMusic2();			}			playInGameMusic1();		}						public function playPlayerStart():void {			if (!soundMute) {				playerStartChannel=playerStart.play();				playerStartChannel.soundTransform=transform1;			}		}				public function stopPlayerStart():void {			playerStartChannel.stop();					}						public function restartTitleMusic():void {						if (!soundMute) {				if (titleMusicPlaying) {					trace("play title music")					titleMusicChannel=titleMusic.play(0,1000);					titleMusicPlaying=true;				}			}		}    				public function playTitleMusic():void {						if (!soundMute) {				if (!titleMusicPlaying) {					trace("play title music")					titleMusicChannel=titleMusic.play(0,1000);					titleMusicPlaying=true;				}			}		}    				public function stopTitleMusic():void {			if (titleMusicPlaying) {				titleMusicChannel.stop();				titleMusicPlaying=false;			}					}			public function playInGameMusic1():void {			if (!soundMute) {				inGameMusic1Channel=inGameMusic1.play(0,5000);				inGameMusic1Channel.soundTransform=transform2;				inGameMusic1Playing=true;			}		}				public function stopInGameMusic1():void {			inGameMusic1Channel.stop();			inGameMusic1Playing=false;					}				public function playInGameMusic2():void {			if (!soundMute) {				inGameMusic2Channel=inGameMusic2.play(0,5000);				inGameMusic2Channel.soundTransform=transform2;				inGameMusic2Playing=true;			}		}				public function stopInGameMusic2():void {			if (inGameMusic2Playing) {				inGameMusic2Channel.stop();				inGameMusic2Playing=false;			}		}						public function playEatDot():void {			if (!soundMute) {				eatDotChannel=eatDot.play();				eatDotChannel.soundTransform=transform2;			}		}				public function stopEatDot():void {			eatDotChannel.stop();					}				public function playEatPowerup():void {			if (!soundMute) {				eatPowerupChannel=eatPowerup.play();				eatPowerupChannel.soundTransform=transform3;			}		}				public function stopPowerupDot():void {			eatPowerupChannel.stop();					}				public function playEatEnemy():void {						if (!soundMute) {				eatEnemyChannel=eatEnemy.play();				eatEnemyChannel.soundTransform=transform2;			}		}				public function stopEatEnemy():void {			eatEnemyChannel.stop();					}				public function playPlayerDie():void {			if (!soundMute) {				playerDieChannel=playerDie.play();				playerDieChannel.soundTransform=transform4;			}		}				public function stopPlayerDie():void {			playerDieChannel.stop();					}				public function playBonusCount():void {			if (!soundMute) {				bonusCountChannel=bonusCount.play();			}				//bonusCountChannel.soundTransform=transform4;		}				public function stopBonusCount():void {			bonusCountChannel.stop();					}				public function playPop1():void {			if (!soundMute) {				pop1Channel=pop1.play();			}			//bonusCountChannel.soundTransform=transform4;		}				public function stopPop1():void {			pop1Channel.stop();					}				public function playTotalbonus():void {			if (!soundMute) {				totalbonusChannel=totalbonus.play();			}			//bonusCountChannel.soundTransform=transform4;		}				public function stopTotalbonus():void {			totalbonus.stop();					}				public function winSong():void {			playSound("win",2,1);		}				public function stopWinSong():void {			stopSound("win");		}						public function menuMove():void{			playSound("eatDot", 1, .5);		}				public function menuMoveSelect():void{			playSound("key", 1, 2);		}				public function codeAccepted():void{			playSound("bonusxupdate", 1, 2);		}							}	}