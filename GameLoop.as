/*** ...* @author Jeff Fulton* @version 0.1*/package  {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.Shape;	import flash.geom.*;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.*;	import flash.net.*;	import flash.display.Graphics;	import flash.text.*;	import flash.utils.Timer;	import LoadingBox;	import flash.events.MouseEvent;	import flash.net.navigateToURL;	import flash.net.URLRequest;	import TitleScreen;	import InstructionScreen;	import HighscoreScreen;	import GamePlay;	import SoundManager;	import ScorePanel;		import flash.events.TimerEvent;    import flash.utils.Timer;	dynamic public class GameLoop extends MovieClip {		//public class GameLoop extends MovieClip {								//gameTimer				var gameTimer:Timer;				//game system states		public static const STATE_SYSTEM_MOCHIAD:int=99;		public static const STATE_SYSTEM_LOADER:int=0;		public static const STATE_SYSTEM_TITLE:int=1;				public static const STATE_SYSTEM_HIGHSCORE:int=2;		public static const STATE_SYSTEM_INSTRUCTIONS:int=3;		public static const STATE_SYSTEM_GAMEPLAY:int=4;		public static const STATE_SYSTEM_GAMEOVER:int=5;		public static const STATE_SYSTEM_HIGHSCOREENTRY:int=6;		public static const STATE_SYSTEM_INVALID_DOMAIN:int=7;		public static const STATE_SYSTEM_GAMEWON:int=8;		public static const STATE_SYSTEM_MENUSCREEN:int=9;		public static const STATE_SYSTEM_CODECREEN:int=10;		public static const STATE_SYSTEM_RESTART:int=11;		//game play states		//public static const STATE_GAME_LEVELINTRO:int=0;		//public static const STATE_GAME_LEVELPLAY:int=1;		//public static const STATE_GAME_LEVELOUTRO:int=2;				//set initial state Machines		public var systemState:int=STATE_SYSTEM_LOADER;				//events		public static const SOUNDMUTE:String = "soundmute";			//urlock		var validDomain:Boolean=false;		//var validDomainString:String="8bitrocket.com";		var validDomainString:String="";				//booleans for state start		public var mochiadOn:Boolean=false;		public var gameOn:Boolean=false;				//SYSTEM_LOADER		var loadingBox:LoadingBox;		var loadingComplete:Boolean=false;		public var loaderOn:Boolean=false;				//SYSTEM_TITLE		var titleScreen:TitleScreen;		var titleLoaded:Boolean=false;		public var titleOn:Boolean=false;		var titleOnLength:int=800;		var titleOnCount:int=0;		public var titleState:int = TitleScreen.STATE_ATTRACT;				//STATE_SYSTEM_CODECREEN		var codeScreen:CodeScreen;		var codeScreenOn:Boolean=false;		var codeScreenLoaded:Boolean=false;				//SYSTEM_HIGHSCORE		var highscoreScreen:HighscoreScreen;		var highscoreLoaded:Boolean=false;		public var highscoreOn:Boolean=false;		var highscoreOnLength:int=600;		var highscoreOnCount:int=0;		//var soHighScore:SharedObject=SharedObject.getLocal("highScoreData");		//public var boardID:String="f566ef3224a0aeb2";		//public var gameID:String="0d67aedf26b9d371";		public var aCurrentInitials:Array=[];		public var lastScore:Number=0; // holds the last game ended score for checking against highscore lists		public var highScoreState:int;		public var lastLives:Number=0;		public var lastLevel:Number=1;		public var last_levelspeedadjust:Number=1;				//SYSTEM MENU SCREEN		var menuScreen:MenuScreen;		var menuOn:Boolean=false;		var menuLoaded:Boolean=false;						//SYSTEM_INSTRUCTIONS		var instructionScreen:InstructionScreen;		public var instructionsOn:Boolean=false;								//STATE_SYSTEM_GAME		var gameInit:Boolean=false;		var gameStarted:Boolean=false;		var gamePlay:GamePlay;						//Sound Manager		public var soundManager:SoundManager;		public var soundManagerCreated:Boolean=false;				//score panel		public var gameLoopScorePanel:ScorePanel;				//passwords		public var bLevelOverride:Boolean=false;		public var iLevelOverride:int;		public var aLevelPassword:Array;		public var maxLevel:int=30;				//game won		public var gameWonCalculated:Boolean=false;							//background link		private var url:String = "http://www.8bitrocket.com";		public function GameLoop() {						//***			//ag=new ActiveGraph(0,false,true,1);			//addChild(ag);						//***			setPasswords();			//background_mc.linktosite.addEventListener(MouseEvent.MOUSE_DOWN,backgroundclicked);			//background_mc.linktosite.buttonMode = true;			//background_mc.linktosite.useHandCursor = true												//addEventListener(Event.ENTER_FRAME, runGame);			gameTimer=new Timer(17);			gameTimer.addEventListener(TimerEvent.TIMER, runGame);			gameTimer.start();			trace("added event listener");						var currUrl:String  = this.loaderInfo.url.toLowerCase();			trace("currUrl=" + currUrl);			if (currUrl.indexOf(validDomainString) !=-1) {				validDomain=true;			}else{				validDomain=false;				systemState=STATE_SYSTEM_INVALID_DOMAIN;			}						//soHighScore=SharedObject.getLocal("highScoreData");			//if (soHighScore.data.score == null) soHighScore.data.score=5000;			//if (soHighScore.data.name == null) soHighScore.data.name="JDF";			//name_txt.text=soHighScore.data.name;			//score_txt.text=soHighScore.data.score;			gameLoopScorePanel=new ScorePanel(this);			addChild(gameLoopScorePanel);		}				function runGame(e:Event):void {								////trace("running game");			///main system game loop			//individual loops and states and inside each system state			////trace("systemState=" + systemState);						try {				switch (systemState) {					//case STATE_SYSTEM_MOCHIAD:						//mochiAdScreen();						//break;					case STATE_SYSTEM_LOADER:						////trace("switching to loader");						doLoadScreen();						break;					case STATE_SYSTEM_TITLE:						doTitleScreen(titleState);						break;											case STATE_SYSTEM_MENUSCREEN:						doMenuScreen();						break;											case STATE_SYSTEM_HIGHSCORE:						//highScoreState=HighscoreScreen.STATE_ENTER;						doHighscoreScreen(highScoreState);						break;					case STATE_SYSTEM_INSTRUCTIONS:						doInstructionsScreen();						break;					case STATE_SYSTEM_GAMEPLAY:						doGamePlay();						break;					case STATE_SYSTEM_INVALID_DOMAIN:						trace("invalid domain");						break;					case STATE_SYSTEM_GAMEOVER:						doGameOver();						break;										case STATE_SYSTEM_CODECREEN:						doCodeScreen();						break;				}			}catch (error:Error) {				trace("*** <Error in gameloop switch> " + error.message);			}		}				/*		function mochiAdScreen():void {			////trace("in mochiad");									if (!mochiadOn) {				MochiAd.showPreloaderAd({clip:this, id:gameID, res:"475x475", ad_finished:this.adFinished});				mochiadOn=true;			}		}	*/				function doLoadScreen():void {			////trace("in loadscreen");									try{							if (!loaderOn) {											//place loading message on screen.					loadingBox=new LoadingBox();					addChild(loadingBox);					loaderOn=true;				}							}catch (error:Error) {				trace("*** <Error in !loaderOn> " + error.message);			}					try {				var movieBytesLoaded:int=this.loaderInfo.bytesLoaded;				var movieBytesTotal:int=this.loaderInfo.bytesTotal;							var movieKLoaded:int=movieBytesLoaded/1024;				var movieKTotal:int=movieBytesTotal/1024;			}catch (error:Error) {				trace("*** <Error in getting bytes> " + error.message);			}						try{							if (movieBytesLoaded >= movieBytesTotal && !loadingComplete) {					////trace("loading complete, starting to play");					loadingComplete=true;				}									////trace("finished comparing loaded to total");										if (loadingComplete && !loadingBox.animStarted) {					loadingBox.gotoAndPlay(2);					loadingBox.animStarted=true;				}else if (loadingComplete && loadingBox.animComplete) {					////trace("loading complete, finished playing");					loaderOn=false;					removeChild(loadingBox);					systemState=STATE_SYSTEM_TITLE;					//this.gotoAndPlay(2);					this.play();				}else if (!loadingComplete) {					////trace("changing loding text");					loadingBox.loaderScale.tlLoader.text=movieKLoaded.toString() + "K / " +  movieKTotal.toString() + "K";					trace("loading text changed");					////trace(movieBytesLoaded + "/" + movieBytesTotal);				}								////trace("calling update");				loadingBox.update();				////trace("finished calling update");			}catch (error:Error){										trace("*** <Error in gameloop> " + error.message);									}						} // end load screen function				function doTitleScreen(stateval:int):void {			//trace("doTitleScreen");			if (!titleLoaded) {				trace("title no loaded");				loadingBox=null;				titleScreen=new TitleScreen(this);				titleScreen.visible=false;								titleLoaded=true;				trace("title loaded");				if (!soundManagerCreated) {					soundManager=new SoundManager(this);					soundManagerCreated=true;					trace("sound manager created");				}						}			if (!titleOn) {				trace("title no on");				titleScreen.visible=true;				titleOn=true;				trace("title on");				titleScreen.playFromStart();				titleScreen.addListeners();				addChild(titleScreen);				soundManager.playTitleMusic();			}					switch (stateval) {						case TitleScreen.STATE_ATTRACT:					//trace("title attract mode");				titleOnCount++;				if (titleOnCount == titleOnLength) {					trace("switching to HS screen");					titleScreen.visible=false;					titleScreen.removeListeners();					//systemState=STATE_SYSTEM_HIGHSCORE;					//highScoreState=HighscoreScreen.STATE_ATTRACT;					titleOnCount=0;					titleOn=false;					trace("title off");				}				break;			case TitleScreen.STATE_DISPLAY:				//trace("title display mode");				titleOnCount++;				if (titleOnCount == titleOnLength) {					trace("title display mode stating animation over");					titleScreen.playFromStart();					titleOnCount=0;					titleOn=false;					trace("title off");				}							break;			}		}			function doHighscoreScreen(stateval:int):void {			if (!highscoreLoaded) {				//highscoreScreen=new HighscoreScreen(this,boardID,gameID);				highscoreScreen.visible=false;				highscoreLoaded=true;				trace("hs loaded");				//MochiScores.setBoardID(boardID);			}												if (!highscoreOn) {				highscoreScreen.addListeners();				addChild(highscoreScreen);				switch (stateval) {									case HighscoreScreen.STATE_CHECK: 					highscoreScreen.visible=true;					highscoreOn=true;					highscoreScreen.setState(HighscoreScreen.STATE_CHECK);					break;				}							}		}			public function highscoreScreenFinshed():void {			systemState=STATE_SYSTEM_TITLE;		}						function doInstructionsScreen():void {			if (!instructionsOn) {				//soundManager.stopTitleMusic();				instructionScreen=new InstructionScreen(this);				addChild(instructionScreen);				instructionsOn=true;			}		}			function doMenuScreen():void {			if (!menuLoaded) {				menuScreen=new MenuScreen(this);				menuLoaded=true;			}						if (!menuOn) {				menuOn=true;				addChild(menuScreen);				menuScreen.reset();			}					}				function doCodeScreen():void {						if (!codeScreenLoaded) {				trace("code screen loading");				codeScreen=new CodeScreen(this);				codeScreenLoaded=true;			}						if (!codeScreenOn) {				codeScreenOn=true;				addChild(codeScreen);				codeScreen.reset();			}		}				public function codeScreenFinished(stateval:int) {			codeScreenOn=false;			removeChild(codeScreen);			trace("in codeScreenFinished");						systemState=stateval;					}				public function menuScreenFinished(val:int) {			menuOn=false;			removeChild(menuScreen);			trace("in menuScreenFinished");			switch (val) {				case STATE_SYSTEM_INSTRUCTIONS:					systemState=STATE_SYSTEM_INSTRUCTIONS;					break;				case STATE_SYSTEM_HIGHSCORE:					highScoreState=HighscoreScreen.STATE_DISPLAY;					systemState=STATE_SYSTEM_HIGHSCORE;					break;				case STATE_SYSTEM_TITLE:					systemState=STATE_SYSTEM_TITLE;					titleState = TitleScreen.STATE_DISPLAY;					trace("trying titleScreen");					break;				case STATE_SYSTEM_GAMEPLAY:					//play					trace("gameLoop.menuScreenFinished gameplay switch");					systemState=STATE_SYSTEM_GAMEPLAY;					break;				case STATE_SYSTEM_CODECREEN: 					systemState=STATE_SYSTEM_CODECREEN;					break;				case STATE_SYSTEM_RESTART:					iLevelOverride=lastLevel;					bLevelOverride=true;					systemState=STATE_SYSTEM_GAMEPLAY;					break;			}		}															function doGamePlay():void {			if (!gameInit) {				gameWonCalculated=false;				trace ("trying to call GamePlay()");				gamePlay=new GamePlay(this);				trace("game play called");				gameInit=true;			}			////trace("trying to run game");			gamePlay.runGame();		}					//call back functions, listeners, etc				/*		function adFinished():void {			trace("ad finished");			mochiadOn=false;			systemState=STATE_SYSTEM_LOADER;		}	*/		public function backgroundclicked(e:MouseEvent):void {			var request:URLRequest = new URLRequest(url);			            try {            				trace("navigating to URL");                navigateToURL(request);            }            catch (error:Error) {                trace("*** <Error in Update URRequest> " + error.message);            }		}			public function titleScreenFinshed():void {			if (titleOn) removeTitleScreen();			if (highscoreOn) removeHighscoreScreen()			systemState=STATE_SYSTEM_MENUSCREEN;			trace("title screen finished");			soundManager.stopTitleMusic();					}				function removeHighscoreScreen() {			removeChild(highscoreScreen);			highscoreScreen.removeListeners();			//highscoreScreen=null;			highscoreOn=false;			highscoreOnCount=0;			//highscoreLoaded=false;		}				function removeTitleScreen() {			removeChild(titleScreen);			//titleScreen=null;			titleOn=false;			titleOnCount=0;			//titleLoaded=false;		}						public function instructionScreenFinshed():void {			removeChild(instructionScreen);			instructionScreen=null;			trace("instruction screen finished");			systemState=STATE_SYSTEM_MENUSCREEN;			instructionsOn=false;		}									public function doGameOver():void {			trace("game loop doGameOver");			//reset booleans and start new game			setbLevelOverride(false);			setiLevelOverride(1);			titleOn=false;			highscoreOn=false;			//titleLoaded=false;			//highscoreLoaded=false;			instructionsOn=false;			//gameWonStarted=false;			gameInit=false;			highScoreState=HighscoreScreen.STATE_CHECK;			systemState=STATE_SYSTEM_HIGHSCORE;					}								//*** some needed getters and setters				public function getaCurrentInitials():Array {			return aCurrentInitials;		}				public function setaCurrentInitials(val:Array):void {			aCurrentInitials=val;		}				public function getlastScore():Number {			return lastScore;		}				public function setlastScore(val:Number):void {			lastScore=val;		}				public function setlastLives(val:Number):void {			lastLives=val;		}				public function getlastLives():Number {			return lastLives;		}				public function setlastLevel(val:Number):void {			lastLevel=val;			if (lastLevel > maxLevel) {				lastLevel=maxLevel;			}		}				public function getlastLevel():Number {			return lastLevel;		}				public function getbLevelOverride():Boolean {			return  bLevelOverride;		}				public function setbLevelOverride(val:Boolean):void {			 bLevelOverride=val;		}				public function getiLevelOverride():int {			return  iLevelOverride;		}				public function setiLevelOverride(val:int):void {			 iLevelOverride=val;		}				public function getlast_levelspeedadjust():int {			return  last_levelspeedadjust;		}				public function setlast_levelspeedadjust(val:int):void {			 last_levelspeedadjust=val;		}												function setNewLocalHighScore(): void {			//var currentName:String=aCurrentInitials[0]+aCurrentInitials[1]+aCurrentInitials[2]			//trace("currentName=" +  currentName);			//soHighScore.data.score=lastScore;			//soHighScore.data.name=currentName;			//name_txt.text=soHighScore.data.name;			//score_txt.text=soHighScore.data.score;		}						function setPasswords():void {			aLevelPassword=new Array("none","john","ponch","gene","barry","artie","sindy","harlan","bonnie","bobby","kathy","bruce","ben","joe","sevenmary","three");		}				public function getaLevelPassword():Array {			return aLevelPassword;		}				public function dispatchSoundMuteEvent(){			trace("dispatch mute event");			dispatchEvent(new Event(GameLoop.SOUNDMUTE));		}	} // end class} // end package