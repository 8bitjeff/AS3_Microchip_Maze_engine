/*** ...* @author Jeff Fulton* @version 0.1*/package  {	import flash.display.Sprite;	import flash.events.*;	import GamePlay;	import flash.utils.getDefinitionByName;		public class LevelInScreen extends EventDispatcher{				private var gamePlay:GamePlay;		public var levelInScreen:levelInScreen_mc;		public var framesToFade:int=30;		public var frameCount:int=0;		public var fadeCount:int=0;		public var fadeStarted:Boolean=false;		public var started:Boolean=false;		private var fadeAmountPerFrame:Number;		public var oPowerUpRow:Object={};		public var oEnemyRow:Object={};		public var oSpecialRow:Object={};		//for positoning on the screen		public var aPowerUpRow:Array=[];		public var aEnemyRow:Array=[];		public var aSpecialRow:Array=[];				//sprites to hold rows on screen		public var spritePowerUpRow:Sprite=new Sprite();		public var spriteEnemyRow:Sprite=new Sprite();		public var spriteSpecialRow:Sprite=new Sprite();				//arraysof x positions		public var aXpos:Array=[];		public var specialY:int=244;		public var enemyY:int=152;		public var powerupY:int=71;				//events		public static const COMPLETE:String = "complete";				public function LevelInScreen(gp:GamePlay) {			gamePlay=gp;			fadeAmountPerFrame=1/framesToFade;			//createXpositions();					}						public function createXpositions() {			trace("creating x positions");			var tempArray:Array=[];			aXpos.push(tempArray); // for 0			tempArray=[];			tempArray=[180];			aXpos.push(tempArray); // for 1			tempArray=[];			tempArray=[145,185];			aXpos.push(tempArray); // for 2			tempArray=[];			tempArray=[125,165,205];			aXpos.push(tempArray); // for 3			tempArray=[];			tempArray=[105,145,185,225];			aXpos.push(tempArray); // for 4			tempArray=[];			tempArray=[85,125,165,205,245];			aXpos.push(tempArray); // for 5			tempArray=[];			tempArray=[65,105,145,185,225,265];			aXpos.push(tempArray); // for 6			tempArray=[];			tempArray=[45,85 ,125,165,205,245,285];			aXpos.push(tempArray); // for 7			tempArray=[];			tempArray=[25,65,105,145,185,225,265,305];			aXpos.push(tempArray); // for 8			trace("done creating x positions");		}				public function start() {						levelInScreen=new levelInScreen_mc();			levelInScreen.x=50;			levelInScreen.y=50;						//setIconsVisible();			//organizeIcons();			trace("level in  started");						//setLevelNumMcs();			gamePlay.gameLoop.addChild(levelInScreen);			fadeStarted=false;			frameCount=0;			fadeCount=0;			started=true;			gamePlay.gameLoop.stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener,false,0,true);			gamePlay.addEventListener(GamePlay.LEVELINUPDATE, updateListener,false,0,true);			setBonusNeeded(String(gamePlay.getextraManAmount()));						levelInScreen.normal_mc.visible=false;			levelInScreen.hard_mc.visible=false;			levelInScreen.insane_mc.visible=false;						trace("gamePlay.getlevelspeedadjust()=" + gamePlay.getlevelspeedadjust());			switch (gamePlay.getlevelspeedadjust()) {								case GamePlay.NORMAL:					levelInScreen.normal_mc.visible=true;					break;				case GamePlay.HARD:					levelInScreen.hard_mc.visible=true;					break;				case GamePlay.INSANE:					levelInScreen.insane_mc.visible=true;					break;			}								}				function keyDownListener(e:KeyboardEvent):void {						trace(e.keyCode + " was pressed");						if (e.keyCode==77) {				trace("M pressed in level in");				gamePlay.gameLoop.dispatchSoundMuteEvent();			}						if (e.keyCode==32 || e.keyCode==13) {				fadeStarted=true;				gamePlay.gameLoop.stage.removeEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);			}		}						public function getstarted():Boolean {			return started;		}				private function updateListener (e:Event):void {			trace("1")			if (started) {				trace("2");				frameCount++;				//trace("levelIn frameCount=" + frameCount);				//trace("levelIn fadeCount=" + fadeCount);								if (fadeCount > framesToFade) {					//trace("fade ended");					completed();				}								if (fadeStarted) {					fadeCount++;					levelInScreen.alpha-=fadeAmountPerFrame;					//trace("levelInScreen.alpha=" + levelInScreen.alpha);				}							}		}			public function completed() {			//trace("completed");			gamePlay.removeEventListener(GamePlay.LEVELINUPDATE, updateListener);			gamePlay.gameLoop.removeChild(levelInScreen);			started=false;			levelInScreen.alpha=1;			oSpecialRow={};			oPowerUpRow={};			oEnemyRow={};			aSpecialRow=[];			aPowerUpRow=[];			aEnemyRow=[];			dispatchEvent(new Event(COMPLETE));				removeIcons();		}								public function setLevelNumMcs():void {			trace("setLevelNumMcs");			var levelnum1:String;			var levelnum2:String;			var stringLevel:String=String(gamePlay.getlevel());			if (gamePlay.getlevel() <10) {				levelnum1="0";				levelnum2=stringLevel;			}else{				levelnum1=stringLevel.substr(0,1);				levelnum2=stringLevel.substr(1,1);			}			trace("levelnum1=" + levelnum1);			trace("levelnum2=" + levelnum2);						levelInScreen.getReady_mc.levelnum1.gotoAndStop("num"+levelnum1);			levelInScreen.getReady_mc.levelnum2.gotoAndStop("num"+levelnum2);			levelInScreen.password_txt.text=gamePlay.getaLevelPassword()[gamePlay.getlevel()];			trace("end setLevelNumMcs");		}		public function setIconsVisible():void {			trace("setIconsVisible");						var showSpecialRow:Boolean=false;						if (oSpecialRow["key"]==true) {				aSpecialRow.push("key");				showSpecialRow=true;			}			if (oSpecialRow["door"]==true) {				aSpecialRow.push("door");				showSpecialRow=true;			}			if (oSpecialRow["transport1"]==true) {				aSpecialRow.push("transport1");				showSpecialRow=true;			}			if (oSpecialRow["transport2"]==true){				aSpecialRow.push("transport2");				showSpecialRow=true;			}			if (oSpecialRow["transport3"]==true){				aSpecialRow.push("transport3");				showSpecialRow=true;			}									if (!showSpecialRow) {				levelInScreen.special_mc.visible=false;			}else{				levelInScreen.special_mc.visible=true;			}									if (oPowerUpRow["attack1"]==true) {				aPowerUpRow.push("attack1");							}			if (oPowerUpRow["attack2"]==true) {				aPowerUpRow.push("attack2");			}			if (oPowerUpRow["attack3"]==true) {				aPowerUpRow.push("attack3");			}			if (oPowerUpRow["attack4"]==true) {				aPowerUpRow.push("attack4");			}			if (oPowerUpRow["freeze"]==true) {				aPowerUpRow.push("freeze");			}			if (oPowerUpRow["kill"]==true) {				aPowerUpRow.push("kill");			}			if (oPowerUpRow["bonusx"]==true){				aPowerUpRow.push("bonusx");			}						if (oPowerUpRow["protect"]==true){				aPowerUpRow.push("protect");			}						if (oPowerUpRow["princess"]==true){				aPowerUpRow.push("princess");			}									if (oEnemyRow["dumb1"]==true){				aEnemyRow.push("dumb1");			}			if (oEnemyRow["dumb2"]==true){				aEnemyRow.push("dumb2");			}			if (oEnemyRow["dumb3"]==true){				aEnemyRow.push("dumb3");			}						if (oEnemyRow["dumb4"]==true){				aEnemyRow.push("dumb4");			}						if (oEnemyRow["dumb5"]==true){				aEnemyRow.push("dumb5");			}						if (oEnemyRow["smart1"]==true) {				aEnemyRow.push("smart1");			}			if (oEnemyRow["smart2"]==true){				aEnemyRow.push("smart2");			}						if (oEnemyRow["smart3"]==true) {				aEnemyRow.push("smart3");			}						if (oEnemyRow["smart4"]==true) {				aEnemyRow.push("smart4");			}						if (oEnemyRow["smart5"]==true) {				aEnemyRow.push("smart5");			}						if (oEnemyRow["smart6"]==true) {				aEnemyRow.push("smart6");			}						if (oEnemyRow["smart7"]==true) {				aEnemyRow.push("smart7");			}						if (oEnemyRow["smart8"]==true) {				aEnemyRow.push("smart8");			}							trace("setIconsVisible");		}				public function organizeIcons():void {			trace("organizeIcons");			var ctr:int;			var xpos:int;			var ypos:int;			var classRef:Class;			trace("aSpecialRow.length=" + aSpecialRow.length);			var aXPosArray=aXpos[aSpecialRow.length];			for (ctr=0;ctr <aSpecialRow.length;ctr++){				xpos=aXPosArray[ctr];				ypos=specialY;				classRef = getDefinitionByName(aSpecialRow[ctr]) as Class;				var specialIconClass:* = new classRef();				specialIconClass.x=xpos;				specialIconClass.y=ypos;				levelInScreen.addChild(specialIconClass);			}									trace("aPowerUpRow.length=" + aPowerUpRow.length);						aXPosArray=aXpos[aPowerUpRow.length];			for (ctr=0;ctr <aPowerUpRow.length;ctr++){				xpos=aXPosArray[ctr];				ypos=powerupY;				trace("aPowerUpRow[ctr]=" + aPowerUpRow[ctr]);				classRef = getDefinitionByName(aPowerUpRow[ctr]) as Class;				var powerupIconClass:* = new classRef();				powerupIconClass.x=xpos;				powerupIconClass.y=ypos;				levelInScreen.addChild(powerupIconClass);			}						trace("aEnemyRow.length=" + aEnemyRow.length);						aXPosArray=aXpos[aEnemyRow.length];			for (ctr=0;ctr <aEnemyRow.length;ctr++){				xpos=aXPosArray[ctr];				ypos=enemyY;				trace("aEnemyRow[ctr]=" + aEnemyRow[ctr]);				classRef = getDefinitionByName(aEnemyRow[ctr]) as Class;				var enemyIconClass:* = new classRef();				enemyIconClass.x=xpos;				enemyIconClass.y=ypos;				levelInScreen.addChild(enemyIconClass);			}				trace("end organizeIcons");				}				public function removeIcons():void {						trace("removeIcons");			var ctr:int;						var classRef:Class;			trace("aSpecialRow.length=" + aSpecialRow.length);			for (ctr=0;ctr <aSpecialRow.length;ctr++){								classRef = getDefinitionByName(aSpecialRow[ctr]) as Class;				var specialIconClass:* = new classRef();				levelInScreen.removeChild(specialIconClass);			}									trace("aPowerUpRow.length=" + aPowerUpRow.length);									for (ctr=0;ctr <aPowerUpRow.length;ctr++){								trace("aPowerUpRow[ctr]=" + aPowerUpRow[ctr]);				classRef = getDefinitionByName(aPowerUpRow[ctr]) as Class;				var powerupIconClass:* = new classRef();				levelInScreen.removeChild(powerupIconClass);			}						trace("aEnemyRow.length=" + aEnemyRow.length);									for (ctr=0;ctr <aEnemyRow.length;ctr++){								trace("aEnemyRow[ctr]=" + aEnemyRow[ctr]);				classRef = getDefinitionByName(aEnemyRow[ctr]) as Class;				var enemyIconClass:* = new classRef();				levelInScreen.removeChild(enemyIconClass);			}				trace("end remove");				}				function setBonusNeeded(bonusString:String):void {			trace("bonus string=" + bonusString);			trace("bonus string.length=" + bonusString.length);						levelInScreen.bonusneeded_mc.number1.gotoAndStop(0);			levelInScreen.bonusneeded_mc.number2.gotoAndStop(0);			levelInScreen.bonusneeded_mc.number3.gotoAndStop(0);			levelInScreen.bonusneeded_mc.number4.gotoAndStop(0);			levelInScreen.bonusneeded_mc.number5.gotoAndStop(0);						if (bonusString.length >0) 	levelInScreen.bonusneeded_mc.number1.gotoAndStop("num" + bonusString.substr(bonusString.length-1,1));			if (bonusString.length >1) 	levelInScreen.bonusneeded_mc.number2.gotoAndStop("num" + bonusString.substr(bonusString.length-2,1));			if (bonusString.length >2) 	levelInScreen.bonusneeded_mc.number3.gotoAndStop("num" + bonusString.substr(bonusString.length-3,1));			if (bonusString.length >3) 	levelInScreen.bonusneeded_mc.number4.gotoAndStop("num" + bonusString.substr(bonusString.length-4,1));			if (bonusString.length >4) 	levelInScreen.bonusneeded_mc.number5.gotoAndStop("num" + bonusString.substr(bonusString.length-5,1));				}					} // end class} // end package